import Head from "next/head";
import styles from "@/styles/Gallery.module.css";
import Image from "next/image";
import { useState } from "react";

export default function Home() {
  return (
    <>
      <Head>
        <title>Avatars</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Gallery />
      </main>
    </>
  );
}

function Adder(props: { onAdderClick: () => void }) {
  return (
    <button className={`${styles.tile} ${styles.adder}`} onClick={props.onAdderClick}>
      <Image
        src="/add.svg"
        width={70}
        height={70}
        alt="add sign"
        className={styles['adder__img']}
      />
    </button>
  );
}

interface Avatar {
  id: number;
  url: string;
}

// batchSize introduced in order to lower the ammount of requests to the server when looking for the unique avatar
async function getUniqueAvatar(avatars: Array<Avatar>, batchSize: number = 10) {
  while (true) {
    const res = await fetch(`https://tinyfac.es/api/data?limit=${batchSize}&quality=0`);
    const data = await res.json();
    if (!data) {
      throw new Error('data cannot be parsed');
    }
    for (const av of data) {
      if (!avatars.find(a => a.id === av.id)) {
        return av;
      }
    }
  }
}

function Gallery() {
  const [avatars, setAvatars] = useState(new Array<Avatar>(0));

  async function handleAdderClick() {
    try {
      const avatar = await getUniqueAvatar(avatars);
      setAvatars([...avatars, avatar]);
    } catch (e) {
      console.log('an error occured');
    }
  }

  async function handleRefreshClick(key: number) {
    try {
      const avatar: Avatar = await getUniqueAvatar(avatars);
      setAvatars(avatars.map(a => {
        if (a.id === key) {
          return avatar;
        }
        return a;
      }));
    } catch (e) {
      console.log('an error occured');
    }
  }

  async function handleRefreshAllClick() {
    try {
      const res = await fetch(`https://tinyfac.es/api/data?limit=${avatars.length}&quality=0`);
      const data = await res.json();
      if (!data) {
        throw new Error('data cannot be parsed');
      }
      setAvatars(data);
    } catch (e) {
      console.log('an error occured');
    }
  }

  return (
    <div className={styles.gallery}>
      {avatars.map((avatar) => 
        <ImageContainer key={avatar.id} avatar={avatar} onRefreshClick={handleRefreshClick} />
      )}
      <Adder onAdderClick={handleAdderClick}/>
      <button className={styles['refresh-all-btn']} onClick={handleRefreshAllClick}>
        Refresh All
      </button>
    </div>
  )
}

function ImageContainer({ avatar, onRefreshClick}: 
  { 
    avatar: Avatar, 
    onRefreshClick: (id: number) => void
  }) {
  return (
    <div className={styles['image-container']} onClick={() => onRefreshClick(avatar.id)}>
      <Image
        src={avatar.url}
        width={240}
        height={240}
        alt="avatar"
        className={`${styles.avatar} ${styles.tile}`}
      />
      <button className={styles['refresh-btn']}>
        <Image
          src="/refresh.svg"
          width={100}
          height={104}
          alt="refresh image"
          className={styles['refresh-btn__img']}
        />
      </button> 
    </div>
  );
}
